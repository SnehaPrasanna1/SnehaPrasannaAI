{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOAA49LjZ2ci+Gp4nou2NAQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SnehaPrasanna1/SnehaPrasannaAI/blob/main/Nqueens%20hillclimbing\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O0Kmm46wr6D9",
        "outputId": "7e6fb8bd-50d5-4664-8846-1ace797558d2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 2 solutions:\n",
            ". Q . .\n",
            ". . . Q\n",
            "Q . . .\n",
            ". . Q .\n",
            "\n",
            ". . Q .\n",
            "Q . . .\n",
            ". . . Q\n",
            ". Q . .\n",
            "\n"
          ]
        }
      ],
      "source": [
        "N = 4\n",
        "\n",
        "def print_board(solution):\n",
        "    for row in solution:\n",
        "        print(\" \".join(\"Q\" if col else \".\" for col in row))\n",
        "    print()\n",
        "\n",
        "def is_safe(board, row, col):\n",
        "    # Check this column on upper side\n",
        "    for i in range(row):\n",
        "        if board[i][col] == 1:\n",
        "            return False\n",
        "\n",
        "    # Check upper diagonal on left side\n",
        "    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):\n",
        "        if j < 0:\n",
        "            break\n",
        "        if board[i][j] == 1:\n",
        "            return False\n",
        "\n",
        "    # Check upper diagonal on right side\n",
        "    for i, j in zip(range(row, -1, -1), range(col, N)):\n",
        "        if j >= N:\n",
        "            break\n",
        "        if board[i][j] == 1:\n",
        "            return False\n",
        "\n",
        "    return True\n",
        "\n",
        "def solve_n_queens(board, row, solutions):\n",
        "    if row == N:\n",
        "        solutions.append([row[:] for row in board])\n",
        "        return\n",
        "\n",
        "    for col in range(N):\n",
        "        if is_safe(board, row, col):\n",
        "            board[row][col] = 1  # Place queen\n",
        "            solve_n_queens(board, row + 1, solutions)  # Recur to place rest\n",
        "            board[row][col] = 0  # Backtrack\n",
        "\n",
        "def main():\n",
        "    board = [[0 for _ in range(N)] for _ in range(N)]\n",
        "    solutions = []\n",
        "\n",
        "    solve_n_queens(board, 0, solutions)\n",
        "\n",
        "    print(f\"Found {len(solutions)} solutions:\")\n",
        "    for solution in solutions:\n",
        "        print_board(solution)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ]
    }
  ]
}